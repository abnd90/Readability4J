group 'net.dankito.readability4j'
version '1.0.8'
def mavenArtifactId = "readability4j"

buildscript {
    ext {
        kotlin_version = '2.0.0'
        slf4jVersion = '2.0.16'
        jsoupVersion = '1.18.1'
        jacksonVersion = '2.17.0'
        logbackVersion = '1.5.12'
        diffUtilsVersion = '2.2'
        okHttpVersion = '3.9.1'
    }

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.10.0"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "org.jsoup:jsoup:$jsoupVersion"

    testImplementation "junit:junit:4.12"
    testImplementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    testImplementation "com.github.wumpz:diffutils:$diffUtilsVersion"
    testImplementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    testImplementation "ch.qos.logback:logback-core:$logbackVersion"
    testImplementation "ch.qos.logback:logback-classic:$logbackVersion"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

/*          Publish to Maven Central            */

// Set OSSRH credentials in gradle.properties (in ~/.gradle/gradle.properties or project's gradle.properties)
def areOssrhPropertiesSet = isPropertySet('ossrhUsername') && isPropertySet('ossrhPassword')

def isPropertySet(propertyName) {
    return properties[propertyName] != null && !(properties[propertyName] as String).isEmpty()
}

// Javadoc and sources JAR tasks
tasks.register('javadocJar', Jar) {
    archiveClassifier.set('javadoc')
    from tasks.javadoc
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

// Publishing artifacts
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact(tasks.named('javadocJar'))
            artifact(tasks.named('sourcesJar'))

            // POM metadata
            pom {
                name.set(mavenArtifactId)
                description.set("A Kotlin port of Mozilla‘s Readability. It extracts a website‘s relevant content and removes all clutter from it.")
                url.set("https://github.com/dankito/Readability4J")
                packaging = 'jar'

                scm {
                    connection.set("scm:git:git://github.com/dankito/Readability4J.git")
                    developerConnection.set("scm:git:git@github.com:dankito/Readability4J.git")
                    url.set("https://github.com/dankito/Readability4J")
                }

                licenses {
                    license {
                        name.set("The Apache License, Version 2.0")
                        url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                    }
                }

                developers {
                    developer {
                        id.set("dankito")
                        name.set("Christian Dankl")
                        email.set("maven@dankito.net")
                    }
                }
            }
        }
    }

    repositories {
        maven {
            if (areOssrhPropertiesSet) {
                url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
                credentials {
                    username = findProperty("ossrhUsername")
                    password = findProperty("ossrhPassword")
                }
            } else {
                url = uri(repositories.mavenLocal().url)
            }
        }
    }
}

// Signing artifacts
signing {
    sign publishing.publications.mavenJava
}
